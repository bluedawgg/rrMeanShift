# -*- coding: utf-8 -*-
"""
Created on Fri Oct 30 19:42:37 2020

@author: RDakka
"""

D=[
    ['BoduppalPt-0',354.2143427454146,1.0742101693746275,-10.601246452870972],
    ['BoduppalPt-1',355.364431084785,0.8499965245097338,-10.482369135757812],
    ['UppalPt-3',347.23207802977373,2.2375204206508976,-9.873833449096987],
    ['UppalPt-4',346.3915513214764,2.22965613395977,-9.2101455364165],
    ['HabsigudaPt-4',351.06789838208823,1.1662921792096237,-7.42033241286708],
    ['LakdikapulPt-0',245.758865193678,-2.717754610569851,-1.2237652224055426],
    ['LakdikapulPt-1',242.35609088403848,-2.2251983875192582,-1.1654879761879735],
    ['LakdikapulPt-2',248.46149994095754,-2.8678924745463785,-1.131931725396973],
    ['LakdikapulPt-3',246.40122870266993,-3.013241307512641,-1.3163888403037916],
    ['LakdikapulPt-4',239.34632319127164,-2.634334639086804,-1.561286680392423],
    ['Banjara_HillsPt-0',191.71807098380805,-0.7737666825839251,-3.730505478670461],
    ['Banjara_HillsPt-1',182.7362768810019,-0.1894990992820542,-3.965189353793155],
    ['Banjara_HillsPt-2',187.4087193272385,-0.5322995851662965,-4.093690633651416],
    ['Banjara_HillsPt-3',188.73441013844374,-0.6367161783439625,-4.144387930289859],
    ['TarnakaPt-0',5.194215031243901,0.6540754379677953,7.195133811681244],
    ['TarnakaPt-1',4.861404935222155,0.6094344301121687,7.165463013888918],
    ['TarnakaPt-2',4.491018048172317,0.458066697922224,5.831982621884764],
    ['BoduppalPt-2',357.4531001196855,0.47353290706713386,-10.644449188162895],
    ['BoduppalPt-3',358.1059479191215,0.38923418625548784,-11.768308717430104],
    ['BoduppalPt-4',355.8262452619941,0.8298462146931492,-11.37084640688126],
    ['UppalPt-0',343.1869114886105,2.719121080307334,-8.998569309369646],
    ['UppalPt-1',344.3174455973074,2.7608138029563665,-9.833208606266137],
    ['UppalPt-2',342.6781256943722,2.8781568768329713,-9.228123445574509],
    ['TarnakaPt-3',4.555538546826531,0.5476921298889708,6.873900834865083],
    ['TarnakaPt-4',4.427234140798545,0.5624834870446306,7.264985378803933],
    ['TarnakaPt-5',5.2564226346321545,0.656390408760307,7.134673915455383],
    ['HabsigudaPt-0',346.13117111526583,1.8382032153266947,-7.4450385906829695],
    ['HabsigudaPt-1',352.87872445373597,0.9491773983989132,-7.597128137310904],
    ['HabsigudaPt-2',352.91387463608294,0.8796392528177153,-7.075835263634044],
    ['HabsigudaPt-3',356.53660167006205,0.4271672016635553,-7.057498977127764],
    ['Banjara_HillsPt-4',195.20535521421678,-1.2310020854735704,-4.52921872853498],
    ['CharminarPt-0',270.7947969527308,6.93143831573334,-0.09613018192608608],
    ['CharminarPt-1',271.2202606495476,6.871686923452654,-0.14634484970600964],
    ['CharminarPt-2',269.6216014529416,-6.755067359913398,-0.04463999483673456],
    ['CharminarPt-3',269.45449562538096,-6.537825863340368,-0.06227349620354804],
    ['CharminarPt-4',267.8216246502929,-7.378191986324677,-0.28068196225238873],
    ['MehdipatnamPt-0',213.4211044503851,-3.0272429054837984,-4.587408582820598],
    ['MehdipatnamPt-1',215.0064123348373,-3.2495415318966248,-4.639752301578403],
    ['MehdipatnamPt-2',217.22204843318198,-3.394173331769719,-4.468116568193643],
    ['MehdipatnamPt-3',221.3370814051767,-3.1316635031651137,-3.560071764833742],
    ['MehdipatnamPt-4',215.34872991039907,-2.778905406474559,-3.9177457875857455],
    ['BowenpallyPt-0',80.76681150867982,4.9635733389731325,0.8068803667325389],
    ['BowenpallyPt-1',82.19407485490449,4.141944163512328,0.5678172631347541],
    ['BowenpallyPt-2',81.67292251823345,6.185132991422654,0.9053063823103964],
    ['BowenpallyPt-3',81.17789826470089,5.1093628911299716,0.7929957092775918],
    ['GachibowliPt-1',172.0492365978779,-1.88964494283358,13.529624572523623],
    ['BowenpallyPt-4',84.8475384236954,4.935316672251905,0.4450267797220683],
    ['KompallyPt-0',84.58717417572568,12.529049386590653,1.1871894138316221],
    ['KompallyPt-1',83.62621289470715,12.644817307629523,1.4125017925710799],
    ['KompallyPt-2',82.83761912725538,13.146723922115655,1.6520648946966539],
    ['KompallyPt-3',82.16537227287925,13.44642417333807,1.8502273521594648],
    ['KompallyPt-4',88.75062061229708,11.588010682044157,0.2527408833485314],
    ['GachibowliPt-0',172.61781154949156,-1.7179367610504772,13.259387489997932],
    ['GachibowliPt-2',170.48801867841811,-2.3119923534865467,13.797982861668581],
    ['GachibowliPt-3',176.72466268461605,-0.7419276257377517,12.963876054671811],
    ['GachibowliPt-4',172.3504990099261,-1.639076227703284,12.20363322518644],
    ['ECILPt-0',27.20589483583233,5.367366506639608,10.441133561064223],
    ['ECILPt-1',23.868462109484778,4.312826743549888,9.746936979767733],
    ['ECILPt-2',23.51552583365717,4.514176662223607,10.374216895834428],
    ['ECILPt-3',30.725806823458807,5.718436873597604,9.621081208955284],
    ['ECILPt-4',29.603645359993674,5.937556951770383,10.450452856383418],
    ['TolichowkiPt-0',203.1946000162955,-2.6617391361128666,-6.2119709361509186],
    ['TolichowkiPt-1',204.11122532504498,-2.8998534594365863,-6.479349938401187],
    ['TolichowkiPt-2',201.9851032145227,-2.7827233624436927,-6.892700172625271],
    ['TolichowkiPt-3',194.5599732765233,-1.8105253524807727,-6.970755947731908],   
]

D_done=[False]*len(D)

def dist(a1,a2,b1,b2):
    return (a1-b1)*(a1-b1) + (a2-b2)*(a2-b2)

def getCentroid(cluster):
    i1=0.0
    j1=0.0
    for i in cluster:
        i1 = i1 + i[2]
        j1 = j1 + i[3]
    return [i1/len(cluster),j1/len(cluster)]

def check_if_done(D_done):
    for i in range(len(D_done)):
        if D_done[i]==False:
            return i
    return True


def rrMeanShift(D,bw):
    ret = []
    
    while 1 :
        p = check_if_done(D_done)
        if p!=True:
            curr_centroid = [D[p][2],D[p][3]]
            curr_cluster=[D[p]]
            curr_clus_size = len(curr_cluster)
            new_clus_size=0
            
            while new_clus_size!=curr_clus_size:   
                
                for i in range(len(D)):
                    curr_clus_size = len(curr_cluster)
                    new_clus_size = curr_clus_size
                    
                    if dist(curr_centroid[0],curr_centroid[1],D[i][2],D[i][3]) <= (bw*bw) and D_done[i]==False:
                        curr_cluster.append(D[i])
                        new_clus_size = new_clus_size+1
                        D_done[i]=True
                
                [curr_centroid[0],curr_centroid[1]] = getCentroid(curr_cluster)
            ret.append(curr_cluster)
        else:
            break
    
    return ret
    

# MAIN CODE ##########################################################

ret = rrMeanShift(D, 2.0)
final_clusters=[]

for i in ret:
    one_set=[]
    for j in i:
        one_set.append(j[0])
    one_set=list(set(one_set))
    final_clusters.append(one_set)    

print(final_clusters)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    